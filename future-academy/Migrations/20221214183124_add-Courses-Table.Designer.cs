// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using future_academy.Contexts;

#nullable disable

namespace future_academy.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20221214183124_add-Courses-Table")]
    partial class addCoursesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("future_academy.Models.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("patronomic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("registerDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("role")
                        .HasColumnType("longtext");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("future_academy.Models.Answer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Questionid")
                        .HasColumnType("int");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Questionid");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("future_academy.Models.Appeal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Appeals");
                });

            modelBuilder.Entity("future_academy.Models.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("teacher")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("future_academy.Models.Group", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("future_academy.Models.Question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Testid")
                        .HasColumnType("int");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Testid");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("future_academy.Models.ServicesInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("graduatesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("openDoorsDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("programsCount")
                        .HasColumnType("int");

                    b.Property<int>("teachersCount")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("ServicesInfo");
                });

            modelBuilder.Entity("future_academy.Models.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("accountId")
                        .HasColumnType("int");

                    b.Property<string>("department")
                        .HasColumnType("longtext");

                    b.Property<int?>("groupId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("accountId");

                    b.HasIndex("groupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("future_academy.Models.Test", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Courseid")
                        .HasColumnType("int");

                    b.Property<string>("theme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Courseid");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("future_academy.Models.Answer", b =>
                {
                    b.HasOne("future_academy.Models.Question", null)
                        .WithMany("answers")
                        .HasForeignKey("Questionid");
                });

            modelBuilder.Entity("future_academy.Models.Question", b =>
                {
                    b.HasOne("future_academy.Models.Test", null)
                        .WithMany("questions")
                        .HasForeignKey("Testid");
                });

            modelBuilder.Entity("future_academy.Models.Student", b =>
                {
                    b.HasOne("future_academy.Models.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId");

                    b.HasOne("future_academy.Models.Group", "group")
                        .WithMany()
                        .HasForeignKey("groupId");

                    b.Navigation("account");

                    b.Navigation("group");
                });

            modelBuilder.Entity("future_academy.Models.Test", b =>
                {
                    b.HasOne("future_academy.Models.Course", null)
                        .WithMany("tests")
                        .HasForeignKey("Courseid");
                });

            modelBuilder.Entity("future_academy.Models.Course", b =>
                {
                    b.Navigation("tests");
                });

            modelBuilder.Entity("future_academy.Models.Question", b =>
                {
                    b.Navigation("answers");
                });

            modelBuilder.Entity("future_academy.Models.Test", b =>
                {
                    b.Navigation("questions");
                });
#pragma warning restore 612, 618
        }
    }
}
